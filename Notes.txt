rental_car_service
|-- Notes.txt
|-- README.md
|-- booking_service
|   |-- Dockerfile
|   |-- app.py
|   `-- booking_service_schema.sql
|-- car_inventory_service
|   |-- Dockerfile
|   |-- app.py
|   |-- car_inventory_service_schema.sql
|   `-- uploads
|-- docker-compose.yml
|-- frontend_service
|   |-- Dockerfile
|   |-- app.py
|   |-- static
|   |   |-- css
|   |   |   `-- styles.css
|   |   `-- js
|   |       `-- scripts.js
|   `-- templates
|       |-- add_car.html
|       |-- all_cars.html
|       |-- auth_all_cars.html
|       |-- book_car.html
|       |-- cars.html
|       |-- index.html
|       |-- login.html
|       |-- register.html
|       |-- success_booking.html
|       |-- update_car.html
|       `-- user_cars.html
`-- user_service
    |-- Dockerfile
    |-- app.py
    `-- user_service_schema.sql

follow the above directory structure, 

-------------- booking_service/app.py ---------------------
# booking_service/app.py

from flask import Flask, request, jsonify
import sqlite3
from flask_cors import CORS
import os

app = Flask(__name__)
CORS(app, supports_credentials=True)

DATABASE = 'database.db'

# Initialize database
def init_db():
    conn = sqlite3.connect(DATABASE)
    cursor = conn.cursor()
    cursor.execute('''CREATE TABLE IF NOT EXISTS bookings (
                        id INTEGER PRIMARY KEY AUTOINCREMENT,
                        user_id INTEGER NOT NULL,
                        car_id INTEGER NOT NULL,
                        start_date TEXT NOT NULL,
                        end_date TEXT NOT NULL,
                        FOREIGN KEY(user_id) REFERENCES users(id),
                        FOREIGN KEY(car_id) REFERENCES cars(id)
                      )''')
    conn.commit()
    conn.close()

init_db()

# Book Car
@app.route('/book_car', methods=['POST'])
def book_car():
    data = request.json
    user_id = data.get('user_id')  # Should come from authenticated user
    car_id = data.get('car_id')
    start_date = data.get('start_date')
    end_date = data.get('end_date')

    if not all([user_id, car_id, start_date, end_date]):
        return jsonify({'message': 'All fields are required'}), 400

    conn = sqlite3.connect(DATABASE)
    cursor = conn.cursor()
    cursor.execute("""INSERT INTO bookings (user_id, car_id, start_date, end_date)
                      VALUES (?, ?, ?, ?)""",
                   (user_id, car_id, start_date, end_date))
    conn.commit()
    conn.close()

    return jsonify({'message': 'Car booked successfully'}), 201

# Get Bookings for a User
@app.route('/bookings/<int:user_id>', methods=['GET'])
def get_bookings(user_id):
    conn = sqlite3.connect(DATABASE)
    cursor = conn.cursor()
    cursor.execute("SELECT * FROM bookings WHERE user_id = ?", (user_id,))
    bookings = cursor.fetchall()
    conn.close()

    booking_list = []
    for booking in bookings:
        booking_data = {
            'id': booking[0],
            'user_id': booking[1],
            'car_id': booking[2],
            'start_date': booking[3],
            'end_date': booking[4]
        }
        booking_list.append(booking_data)

    return jsonify(booking_list), 200

if __name__ == '__main__':
    app.run(host='0.0.0.0', port=5003, debug=True)

------------------ car_inventory_service/app.py ------------------------
# car_inventory_service/app.py

from flask import Flask, request, jsonify
import sqlite3
from database import init_db
from flask_cors import CORS
import os
from werkzeug.utils import secure_filename

app = Flask(__name__)
CORS(app, supports_credentials=True)

app.config['UPLOAD_FOLDER'] = 'uploads'
ALLOWED_EXTENSIONS = {'png', 'jpg', 'jpeg', 'gif'}

init_db()

def allowed_file(filename):
    return '.' in filename and \
           filename.rsplit('.', 1)[1].lower() in ALLOWED_EXTENSIONS

DATABASE = 'database.db'

# Add Car
@app.route('/add_car', methods=['POST'])
def add_car():
    if 'photo' not in request.files:
        return jsonify({'message': 'No photo uploaded'}), 400

    photo = request.files['photo']

    if photo and allowed_file(photo.filename):
        filename = secure_filename(photo.filename)
        photo.save(os.path.join(app.config['UPLOAD_FOLDER'], filename))
    else:
        return jsonify({'message': 'Invalid file type'}), 400

    data = request.form
    owner_id = data.get('owner_id')  # This should come from the authenticated user
    make = data.get('make')
    model = data.get('model')
    year = data.get('year')
    price_per_day = data.get('price_per_day')

    if not all([owner_id, make, model, year, price_per_day]):
        return jsonify({'message': 'All fields are required'}), 400

    conn = sqlite3.connect(DATABASE)
    cursor = conn.cursor()
    cursor.execute("""INSERT INTO cars (owner_id, make, model, year, price_per_day, photo)
                      VALUES (?, ?, ?, ?, ?, ?)""",
                   (owner_id, make, model, int(year), float(price_per_day), filename))
    conn.commit()
    conn.close()

    return jsonify({'message': 'Car added successfully'}), 201

# Update Car
@app.route('/update_car/<int:car_id>', methods=['PUT'])
def update_car(car_id):
    data = request.json
    make = data.get('make')
    model = data.get('model')
    year = data.get('year')
    price_per_day = data.get('price_per_day')

    conn = sqlite3.connect(DATABASE)
    cursor = conn.cursor()
    cursor.execute("""UPDATE cars SET make = ?, model = ?, year = ?, price_per_day = ?
                      WHERE id = ?""",
                   (make, model, year, price_per_day, car_id))
    conn.commit()
    conn.close()

    return jsonify({'message': 'Car updated successfully'}), 200

# Delete Car
@app.route('/delete_car/<int:car_id>', methods=['DELETE'])
def delete_car(car_id):
    conn = sqlite3.connect(DATABASE)
    cursor = conn.cursor()
    cursor.execute("DELETE FROM cars WHERE id = ?", (car_id,))
    conn.commit()
    conn.close()
    return jsonify({'message': 'Car deleted successfully'}), 200

# Get All Cars
@app.route('/cars', methods=['GET'])
def get_cars():
    conn = sqlite3.connect(DATABASE)
    cursor = conn.cursor()
    cursor.execute("SELECT * FROM cars")
    cars = cursor.fetchall()
    conn.close()

    car_list = []
    for car in cars:
        car_data = {
            'id': car[0],
            'owner_id': car[1],
            'make': car[2],
            'model': car[3],
            'year': car[4],
            'price_per_day': car[5],
            'photo': car[6]
        }
        car_list.append(car_data)

    return jsonify(car_list), 200

if __name__ == '__main__':
    if not os.path.exists('uploads'):
        os.makedirs('uploads')
    app.run(host='0.0.0.0', port=5002, debug=True)


------------------------ user_service/app.py -----------------
# user_service/app.py

from flask import Flask, request, jsonify, session
from flask_bcrypt import Bcrypt
from flask_login import LoginManager, UserMixin, login_user, login_required, logout_user, current_user
import sqlite3
from flask_cors import CORS

app = Flask(__name__)
CORS(app, supports_credentials=True)

app.secret_key = 'DragonGod858'
bcrypt = Bcrypt(app)
login_manager = LoginManager()
login_manager.init_app(app)

DATABASE = 'database.db'

# User model
class User(UserMixin):
    def __init__(self, id, username, password):
        self.id = id
        self.username = username
        self.password = password

# Load user callback
@login_manager.user_loader
def load_user(user_id):
    conn = sqlite3.connect(DATABASE)
    cursor = conn.cursor()
    cursor.execute("SELECT * FROM users WHERE id = ?", (user_id,))
    user = cursor.fetchone()
    conn.close()
    if user:
        return User(id=user[0], username=user[1], password=user[2])
    return None

# Initialize database
def init_db():
    conn = sqlite3.connect(DATABASE)
    cursor = conn.cursor()
    cursor.execute('''CREATE TABLE IF NOT EXISTS users (
                        id INTEGER PRIMARY KEY AUTOINCREMENT,
                        username TEXT UNIQUE NOT NULL,
                        password TEXT NOT NULL
                      )''')
    conn.commit()
    conn.close()

init_db()

# Register route
@app.route('/register', methods=['POST'])
def register():
    data = request.json
    username = data.get('username')
    password = data.get('password')

    if not username or not password:
        return jsonify({'message': 'Username and password required'}), 400

    hashed_password = bcrypt.generate_password_hash(password).decode('utf-8')

    try:
        conn = sqlite3.connect(DATABASE)
        cursor = conn.cursor()
        cursor.execute("INSERT INTO users (username, password) VALUES (?, ?)", 
                       (username, hashed_password))
        conn.commit()
        conn.close()
        return jsonify({'message': 'User registered successfully'}), 201
    except sqlite3.IntegrityError:
        return jsonify({'message': 'Username already exists'}), 409

# Login route
@app.route('/login', methods=['POST'])
def login():
    data = request.json
    username = data.get('username')
    password = data.get('password')

    conn = sqlite3.connect(DATABASE)
    cursor = conn.cursor()
    cursor.execute("SELECT * FROM users WHERE username = ?", (username,))
    user = cursor.fetchone()
    conn.close()

    if user and bcrypt.check_password_hash(user[2], password):
        user_obj = User(id=user[0], username=user[1], password=user[2])
        login_user(user_obj)
        return jsonify({'message': 'Logged in successfully'}), 200
    else:
        return jsonify({'message': 'Incorrect credentials'}), 401

# Logout route
@app.route('/logout', methods=['POST'])
@login_required
def logout():
    logout_user()
    return jsonify({'message': 'Logged out successfully'}), 200

# Get User Details
@app.route('/user', methods=['GET'])
@login_required
def get_user():
    username = request.args.get('username')
    
    conn = sqlite3.connect(DATABASE)
    cursor = conn.cursor()
    cursor.execute("SELECT * FROM users WHERE username = ?", (username,))
    user = cursor.fetchone()
    conn.close()

    if user:
        user_data = {
            'id': user[0],
            'username': user[1]
        }
        return jsonify(user_data), 200
    else:
        return jsonify({'message': 'User not found'}), 404

if __name__ == '__main__':
    app.run(host='0.0.0.0', port=5001, debug=True)


use the above code as reference, and give detailed step-by-step, contents of each file in the file structure mentioned above, make use of Flask in backendand HTML, CSS, javascrip only for front end
don't ake use of requrements.txt in docker files